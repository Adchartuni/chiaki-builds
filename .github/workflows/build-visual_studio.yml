name: Build Chiaki with Visual Studio

on:
  workflow_dispatch:

jobs:
  build-win_x64: # only win_x64 so far :)
    name: Build Chiaki Windows x64 binary
    runs-on: windows-2022

    defaults:
      run:
        shell: powershell

    steps:

      - name: Clean Workspace Action
        uses: yumis-coconudge/clean-workspace-action@v1.0.5

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Setup NASM
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip" -OutFile ".\nasm-2.15.05-win64.zip"
          Expand-Archive -LiteralPath "nasm-2.15.05-win64.zip" -DestinationPath "."
          Rename-Item "nasm-2.15.05" "nasm"
          Write-Output "${{ github.workspace }}\nasm" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup ffmpeg
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n5.0-latest-win64-gpl-shared-5.0.zip" -OutFile ".\ffmpeg-n5.0-latest-win64-gpl-shared-5.0.zip"
          Expand-Archive -LiteralPath "ffmpeg-n5.0-latest-win64-gpl-shared-5.0.zip" -DestinationPath "."
          Rename-Item "ffmpeg-n5.0-latest-win64-gpl-shared-5.0" "ffmpeg"
          Write-Output "${{ github.workspace }}\ffmpeg" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Setup nanopb
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://jpa.kapsi.fi/nanopb/download/nanopb-0.4.6-windows-x86.zip" -OutFile ".\nanopb-0.4.6-windows-x86.zip"
          Expand-Archive -LiteralPath "nanopb-0.4.6-windows-x86.zip" -DestinationPath "."
          Rename-Item "nanopb-0.4.6-windows-x86" "nanopb"
      #     Write-Output "\generator-bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup OpenSSL
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://mirror.firedaemon.com/OpenSSL/openssl-1.1.1p.zip" -OutFile ".\openssl-1.1.1p.zip"
          Expand-Archive -LiteralPath "openssl-1.1.1p.zip" -DestinationPath "."
          Rename-Item "openssl-1.1" "openssl"
          Write-Output "${{ github.workspace }}\openssl" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup SDL2
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://www.libsdl.org/release/SDL2-devel-2.0.22-VC.zip" -OutFile ".\SDL2-devel-2.0.22-VC.zip"
          Expand-Archive -LiteralPath "SDL2-devel-2.0.22-VC.zip" -DestinationPath "."
          Rename-Item "SDL2-2.0.22" "SDL2"
          $nix_path = "${{ github.workspace }}" -replace "\\", "/"
          Write-Output "SDL2_DIR=${{ github.workspace }}\SDL2" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Set-Content -Path "${{ github.workspace }}\SDL2\sdl2-config.cmake" -Value 'set(SDL2_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/SDL2/include")'
          Add-Content -Path "${{ github.workspace }}\SDL2\sdl2-config.cmake" -Value 'set(SDL2_LIBRARIES "${CMAKE_CURRENT_LIST_DIR}/SDL2/lib/x64/SDL2.lib;${CMAKE_CURRENT_LIST_DIR}/SDL2/lib/x64/SDL2main.lib")'
          Add-Content -Path "${{ github.workspace }}\SDL2\sdl2-config.cmake" -Value 'set(SDL2_LIBDIR "${CMAKE_CURRENT_LIST_DIR}/SDL2/lib/x64")'
          Add-Content -Path "${{ github.workspace }}\SDL2\sdl2-config.cmake" -Value 'string(STRIP "${SDL2_LIBRARIES}" SDL2_LIBRARIES)'
          Get-Content -Path "${{ github.workspace }}\SDL2\sdl2-config.cmake"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Install pip dependencies
        run: |
          python3 -m pip install --upgrade setuptools wheel
          python3 -m pip install --user --upgrade scons protobuf grpcio-tools pyinstaller
          python3 -c 'import google.protobuf; print(google.protobuf.__file__)'
      
      # - name: Build nanopb
      #   working-directory: chiaki
      #   shell: bash
      #   run: |
      #     cd third-party/nanopb
      #     ./tools/make_windows_package.sh

      - name: Setup Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: win64_msvc2019_64

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: "x86_64"
          toolset: "14"

      # - name: Build FFMPEG
      #   run: |
      #     git clone https://git.ffmpeg.org/ffmpeg.git --branch "n5.0.1" --single-branch #was 4.3.1
      #     cd ffmpeg
      #     ./configure --disable-all --enable-avcodec --enable-decoder=h264 --enable-decoder=hevc --enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --prefix='${{ github.workspace }}\ffmpeg\ffmpeg-prefix' --target-os=win64 --arch=x86_64 --toolchain=msvc 
      #     make -j4
      #     make install

      # - name: Setup MSYS2
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     pacboy: >-
      #       ffmpeg:p
          
      # - name: Put MSYS2_MinGW64 on PATH
      #   run: echo "${{ runner.temp }}\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build Opus
        run: |
          git clone https://github.com/xiph/opus.git
          cd opus
          mkdir build
          cmake `
          -S . `
          -B build `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_C_COMPILER=cl `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\opus-prefix"
          cmake --build build --config Release
          cmake --install build

      # missing
      # Could NOT find nanopb (missing: nanopb_DIR)
      - name: Configure
        working-directory: chiaki
        run: |
          
          cmake `
          -S . `
          -B build `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_C_COMPILER=cl `
          -DCMAKE_C_FLAGS="-we4013" `
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE `
          -DCMAKE_BUILD_TYPE=Release `
          -DCHIAKI_ENABLE_CLI=OFF `
          -DCHIAKI_GUI_ENABLE_SDL_GAMECONTROLLER=ON `
          -DPYTHON_EXECUTABLE="${{ env.pythonLocation }}\python.exe" `
          -DINCLUDE_DIRECTORIES="$INCLUDE_DIRECTORIES;${{ github.workspace }}\SDL2\include" `
          -DCMAKE_EXE_LINKER_FLAGS="$CMAKE_EXE_LINKER_FLAGS -lSDL2 -lwinpthread -lavformat -lavcodec -lavutil" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}\nanopb;${{ github.workspace }}\ffmpeg;${{ github.workspace }}\opus-prefix;${{ github.workspace }}\openssl\x64;${{ github.workspace }}\SDL2;${{ env.Qt5_Dir }}"

      - name: Build
        working-directory: chiaki
        run: |
          cmake --build build --config Release --target chiaki
      
      - name: Prepare Qt deployment package
        shell: pwsh
        run: |
          mkdir Chiaki
          cp build\gui\chiaki.exe Chiaki
          windeployqt.exe --no-translations Chiaki/chiaki.exe
