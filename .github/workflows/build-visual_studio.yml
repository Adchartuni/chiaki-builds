name: Build Chiaki with Visual Studio

on:
  workflow_dispatch:

jobs:
  build-win_x64: # only win_x64 so far :)
    name: Build Chiaki Windows x64 binary
    runs-on: windows-2022

    defaults:
      run:
        working-directory: chiaki
        shell: powershell

    steps:

      - name: Clean Workspace Action
        uses: yumis-coconudge/clean-workspace-action@v1.0.5

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Setup protoc
        uses: arduino/setup-protoc@v1.1.2

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: "x86_64"
          toolset: "14.29"
      
      - name: Setup YASM
        run: |
          mkdir "${{ github.workspaces }}\yasm"
          cd "${{ github.workspaces }}\yasm"
          wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe
          mv yasm-1.3.0-win64.exe yasm.exe
          echo "${{ github.workspaces }}\yasm" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build FFMPEG
        run: |
          cd ${{ github.workspaces }}
          git clone https://git.ffmpeg.org/ffmpeg.git --depth 1 -b 'n5.0.1' #was 4.3.1
          cd ffmpeg
          ./configure --target-os=win64 --arch=x86_64 --toolchain=msvc --disable-all --enable-avcodec --enable-decoder=h264 --enable-decoder=hevc --enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --prefix="${{ github.workspace }}/ffmpeg/ffmpeg-prefix" "$@"
          make -j4
          make install

      - name: Build Opus
        run: |
          cd ${{ github.workspaces }}
          git clone https://github.com/xiph/opus.git
          cd opus
          mkdir build
          cd build
          cmake `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_C_COMPILER=cl `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspaces }}/opus-prefix" `
          cmake --build build

      - name: Setup SDL2
        run: |
          cd ${{ github.workspaces }}
          wget https://www.libsdl.org/release/SDL2-devel-2.0.22-VC.zip
          Expand-Archive -LiteralPath "SDL2-devel-2.0.22-VC.zip" -DestinationPath "."
          echo "SDL_ROOT=${{ github.workspace }}\SDL2-2.0.22" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append # export SDL_ROOT="$APPVEYOR_BUILD_FOLDER/SDL2-2.0.10" || exit 1
          Add-Content -Path "${{ github.workspace }}\SDL2-2.0.22\SDL2Config.cmake" -Value 'set(SDL2_INCLUDE_DIRS \"$SDL_ROOT/include\")'
          Add-Content -Path "${{ github.workspace }}\SDL2-2.0.22\SDL2Config.cmake" -Value 'set(SDL2_LIBRARIES \"$SDL_ROOT/lib/x64/SDL2.lib\")'
          Add-Content -Path "${{ github.workspace }}\SDL2-2.0.22\SDL2Config.cmake" -Value 'set(SDL2_LIBDIR \"$SDL_ROOT/lib/x64\")'

      - name: Setup Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: win64_msvc2019_64

      - name: Configure
        run: |
          cmake `
          --no-warn-unused-cli `
          -S . `
          -B build `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_CXX_STANDARD_LIBRARIES="-static-libgcc -static-libstdc++ $CMAKE_CXX_STANDARD_LIBRARIES" `
          -DCMAKE_EXE_LINKER_FLAGS="$CMAKE_EXE_LINKER_FLAGS -lwinpthread -lavformat -lavcodec -lavutil" `
          -DCHIAKI_ENABLE_CLI=OFF `
          -DCHIAKI_GUI_ENABLE_SDL_GAMECONTROLLER=ON `
          -DPYTHON_EXECUTABLE=${{ env.pythonLocation }}\python.exe
      
      - name: Build
        run: |
          cmake --build build --config Release --target chiaki --
          ls -R